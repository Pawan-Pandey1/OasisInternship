import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

class ATMSystem {
    private Map<String, String> userCredentials;
    private double balance;
    private StringBuilder transactionHistory;

    public ATMSystem() {
        userCredentials = new HashMap<>();
        userCredentials.put("user1", "1234");
        userCredentials.put("user2", "5678");

        balance = 5000.0; // Initial balance
        transactionHistory = new StringBuilder();
    }

    public boolean validateUser(String userId, String pin) {
        String storedPin = userCredentials.get(userId);
        return storedPin != null && storedPin.equals(pin);
    }

    public String getTransactionHistory() {
        return transactionHistory.toString();
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactionHistory.append("Withdrawal: -$").append(amount).append("\n");
            return true;
        }
        return false;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactionHistory.append("Deposit: +$").append(amount).append("\n");
        }
    }

    public boolean transfer(String recipientAccountNumber, double amount) {
        // Implement transfer logic here
        return false;
    }
}

public class ATMInterface {
    private static Scanner scanner = new Scanner(System.in);
    private static ATMSystem atmSystem = new ATMSystem();

    public static void main(String[] args) {
        System.out.println("Welcome to the ATM System!");

        // Prompt for user ID and PIN
        System.out.print("Enter your User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter your PIN: ");
        String pin = scanner.nextLine();

        // Validate user ID and PIN
        if (atmSystem.validateUser(userId, pin)) {
            System.out.println("Login successful!");
            showMainMenu();
        } else {
            System.out.println("Invalid User ID or PIN. Exiting...");
        }
    }

    private static void showMainMenu() {
        boolean quit = false;

        while (!quit) {
            System.out.println("\nMain Menu");
            System.out.println("1. Transactions History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    showTransactionHistory();
                    break;
                case 2:
                    performWithdrawal();
                    break;
                case 3:
                    performDeposit();
                    break;
                case 4:
                    performTransfer();
                    break;
                case 5:
                    quit = true;
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    private static void showTransactionHistory() {
        System.out.println("\nTransaction History");
        System.out.println(atmSystem.getTransactionHistory());
    }

    private static void performWithdrawal() {
        System.out.print("\nEnter the withdrawal amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume the newline character

        if (atmSystem.withdraw(amount)) {
            System.out.println("Withdrawal successful!");
        } else {
            System.out.println("Insufficient balance or invalid amount!");
        }
    }

    private static void performDeposit() {
        System.out.print("\nEnter the deposit amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume the newline character

        atmSystem.deposit(amount);
        System.out.println("Deposit successful!");
    }

    private static void performTransfer() {
        System.out.print("\nEnter the recipient's account number: ");
        String recipientAccountNumber = scanner.nextLine();
        System.out.print("Enter the transfer amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume the newline character

        if (atmSystem.transfer(recipientAccountNumber, amount)) {
            System.out.println("Transfer successful!");
        } else {
            System.out.println("Transfer failed. Invalid account number or insufficient balance!");
        }
    }
}
